// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     /Users/miomin/Desktop/workspace/alibaba/WeexCore-dev/WeexCore-
//    dev/android/weex_core_debug/Source/prebuild/jni_generator.py
// For
//     com/taobao/weex/WXSDKInstance

#ifndef com_taobao_weex_WXSDKInstance_JNI
#define com_taobao_weex_WXSDKInstance_JNI

#include <jni.h>

//#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kWXSDKInstanceClassPath[] = "com/taobao/weex/WXSDKInstance";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_WXSDKInstance_clazz = NULL;
#define WXSDKInstance_clazz(env) g_WXSDKInstance_clazz

}  // namespace

// Step 2: method stubs.

static intptr_t g_WXSDKInstance_getInstanceByID = 0;
static base::android::ScopedLocalJavaRef<jobject>
    Java_WXSDKInstance_getInstanceByID(JNIEnv* env, jstring instanceId) {
  /* Must call RegisterNativesImpl()  */
  //CHECK_CLAZZ(env, WXSDKInstance_clazz(env),
  //    WXSDKInstance_clazz(env), NULL);
  jmethodID method_id =
      base::android::GetMethod(
      env, WXSDKInstance_clazz(env),
      base::android::STATIC_METHOD,
      "getInstanceByID",

"("
"Ljava/lang/String;"
")"
"Lcom/taobao/weex/WXSDKInstance;",
      &g_WXSDKInstance_getInstanceByID);

  jobject ret =
      env->CallStaticObjectMethod(WXSDKInstance_clazz(env),
          method_id, instanceId);
  base::android::CheckException(env);
  return base::android::ScopedLocalJavaRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_WXSDKInstance_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kWXSDKInstanceClassPath).Get()));

  return true;
}

#endif  // com_taobao_weex_WXSDKInstance_JNI
