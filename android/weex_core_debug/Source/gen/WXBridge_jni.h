// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     /Users/shiwentao/Downloads/weex/weex-
//    framework/weex/android/weex_core_debug/Source/prebuild/jni_generator.py
// For
//     com/taobao/weex/bridge/WXBridge

#ifndef com_taobao_weex_bridge_WXBridge_JNI
#define com_taobao_weex_bridge_WXBridge_JNI

#include <jni.h>

//#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kWXBridgeClassPath[] = "com/taobao/weex/bridge/WXBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_WXBridge_clazz = NULL;
#define WXBridge_clazz(env) g_WXBridge_clazz

}  // namespace

static jint InitFramework(JNIEnv* env, jobject jcaller,
    jstring framework,
    jobject params);

static jint ExecJS(JNIEnv* env, jobject jcaller,
    jstring instanceId,
    jstring name,
    jstring function,
    jobjectArray args);

static void OnVsync(JNIEnv* env, jobject jcaller,
    jstring instanceId);

static jint ExecJSService(JNIEnv* env, jobject jcaller,
    jstring javascript);

static void TakeHeapSnapshot(JNIEnv* env, jobject jcaller,
    jstring filename);

// Step 2: method stubs.

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsWXBridge[] = {
    { "nativeInitFramework",
"("
"Ljava/lang/String;"
"Lcom/taobao/weex/bridge/WXParams;"
")"
"I", reinterpret_cast<void*>(InitFramework) },
    { "nativeExecJS",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"[Lcom/taobao/weex/bridge/WXJSObject;"
")"
"I", reinterpret_cast<void*>(ExecJS) },
    { "nativeOnVsync",
"("
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(OnVsync) },
    { "nativeExecJSService",
"("
"Ljava/lang/String;"
")"
"I", reinterpret_cast<void*>(ExecJSService) },
    { "nativeTakeHeapSnapshot",
"("
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(TakeHeapSnapshot) },
};

static bool RegisterNativesImpl(JNIEnv* env) {

  g_WXBridge_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kWXBridgeClassPath).Get()));

  const int kMethodsWXBridgeSize =
      sizeof(kMethodsWXBridge)/sizeof(kMethodsWXBridge[0]);

  if (env->RegisterNatives(WXBridge_clazz(env),
                           kMethodsWXBridge,
                           kMethodsWXBridgeSize) < 0) {
    //jni_generator::HandleRegistrationError(
    //    env, WXBridge_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // com_taobao_weex_bridge_WXBridge_JNI
