// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     /Users/shiwentao/Downloads/weex/weex-
//    framework/weex/android/weex_core_debug/Source/prebuild/jni_generator.py
// For
//     com/taobao/weex/ui/LayoutBridge

#ifndef com_taobao_weex_ui_LayoutBridge_JNI
#define com_taobao_weex_ui_LayoutBridge_JNI

#include <jni.h>

//#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kLayoutBridgeClassPath[] = "com/taobao/weex/ui/LayoutBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_LayoutBridge_clazz = NULL;
#define LayoutBridge_clazz(env) g_LayoutBridge_clazz

}  // namespace

static void RunWork(JNIEnv* env, jobject jcaller);

// Step 2: method stubs.

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsLayoutBridge[] = {
    { "nativeRunWork",
"("
")"
"V", reinterpret_cast<void*>(RunWork) },
};

static bool RegisterNativesImpl(JNIEnv* env) {

  g_LayoutBridge_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kLayoutBridgeClassPath).Get()));

  const int kMethodsLayoutBridgeSize =
      sizeof(kMethodsLayoutBridge)/sizeof(kMethodsLayoutBridge[0]);

  if (env->RegisterNatives(LayoutBridge_clazz(env),
                           kMethodsLayoutBridge,
                           kMethodsLayoutBridgeSize) < 0) {
    //jni_generator::HandleRegistrationError(
    //    env, LayoutBridge_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // com_taobao_weex_ui_LayoutBridge_JNI
