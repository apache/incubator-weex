def jsc_dir = new File(project.buildDir, 'jsc')
def jsc_file = new File(jsc_dir, 'jsc.tgz')
def jsc_url = new URL('https://registry.npmjs.org/jsc-android/-/jsc-android-241213.1.0.tgz')
def aar_name = 'android-jsc-intl'

def downloadJSC = { URL url, File dest ->
    if (!dest.getParentFile().exists()) {
        dest.getParentFile().mkdirs()
    }
    url.withInputStream { i -> dest.withOutputStream { it << i } }
}

task(download){
    doLast{
        if(!jsc_file.exists()) {
            downloadJSC(jsc_url, jsc_file)
        }
    }
}

task unzipJSC(type: Copy, dependsOn: download) {
    from tarTree(resources.gzip(jsc_file))
    into jsc_dir
    include "**/${aar_name}/**/*.aar"
    eachFile{
        it.path = it.name
    }
    rename ".*", "${aar_name}.aar"
}

task copyJscToJniDir(type: Copy, dependsOn: unzipJSC)  {
    if(project.hasProperty('jsc_url')){
        jsc_url = new URL(project.getProperty('jsc_url').toString())
    }
    if(project.hasProperty('aar_name')){
        aar_name = project.getProperty('aar_name').toString()
    }
    from zipTree(new File(jsc_dir, "${aar_name}.aar"))
    into project.android.sourceSets.main.jniLibs.srcDirs[-1]
    include 'jni/**/*.so'
    eachFile{
        def path_list = new LinkedList<>(it.relativePath.segments.toList())
        path_list.removeAt(0)
        it.relativePath = new RelativePath(true, path_list[0], path_list[1])
    }
}