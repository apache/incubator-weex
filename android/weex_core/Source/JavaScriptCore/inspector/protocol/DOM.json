{
    "domain": "DOM",
    "description": "This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object that has an <code>id</code>. This <code>id</code> can be used to get additional information on the Node, resolve it into the JavaScript object wrapper, etc. It is important that client receives DOM events only for the nodes that are known to the client. Backend keeps track of the nodes that were sent to the client and never sends the same node twice. It is client's responsibility to collect information about the nodes that were sent to the client.<p>Note that <code>iframe</code> owner elements will return corresponding document elements as their child nodes.</p>",
    "availability": "web",
    "types": [
        {
            "id": "NodeId",
            "type": "integer",
            "description": "Unique DOM node identifier."
        },
        {
            "id": "BackendNodeId",
            "type": "integer",
            "description": "Unique DOM node identifier used to reference a node that may not have been pushed to the front-end."
        },
        {
            "id": "PseudoType",
            "type": "string",
            "enum": ["before", "after"],
            "description": "Pseudo element type."
        },
        {
            "id": "ShadowRootType",
            "type": "string",
            "enum": ["user-agent", "open", "closed"],
            "description": "Shadow root type."
        },
        {
            "id": "CustomElementState",
            "type": "string",
            "enum": ["builtin", "custom", "waiting", "failed"],
            "description": "Custom element state."
        },
        {
            "id": "LiveRegionRelevant",
            "type": "string",
            "enum": ["additions", "removals", "text"],
            "description": "Token values of @aria-relevant attribute."
        },
        {
            "id": "Node",
            "type": "object",
            "properties": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Node identifier that is passed into the rest of the DOM messages as the <code>nodeId</code>. Backend will only push node with given <code>id</code> once. It is aware of all requested nodes and will only fire DOM events for nodes known to the client." },
                { "name": "nodeType", "type": "integer", "description": "<code>Node</code>'s nodeType." },
                { "name": "nodeName", "type": "string", "description": "<code>Node</code>'s nodeName." },
                { "name": "localName", "type": "string", "description": "<code>Node</code>'s localName." },
                { "name": "nodeValue", "type": "string", "description": "<code>Node</code>'s nodeValue." },
                { "name": "childNodeCount", "type": "integer", "optional": true, "description": "Child count for <code>Container</code> nodes." },
                { "name": "children", "type": "array", "optional": true, "items": { "$ref": "Node" }, "description": "Child nodes of this node when requested with children." },
                { "name": "attributes", "type": "array", "optional": true, "items": { "type": "string" }, "description": "Attributes of the <code>Element</code> node in the form of flat array <code>[name1, value1, name2, value2]</code>." },
                { "name": "documentURL", "type": "string", "optional": true, "description": "Document URL that <code>Document</code> or <code>FrameOwner</code> node points to." },
                { "name": "baseURL", "type": "string", "optional": true, "description": "Base URL that <code>Document</code> or <code>FrameOwner</code> node uses for URL completion." },
                { "name": "publicId", "type": "string", "optional": true, "description": "<code>DocumentType</code>'s publicId." },
                { "name": "systemId", "type": "string", "optional": true, "description": "<code>DocumentType</code>'s systemId." },
                { "name": "xmlVersion", "type": "string", "optional": true, "description": "<code>Document</code>'s XML version in case of XML documents." },
                { "name": "name", "type": "string", "optional": true, "description": "<code>Attr</code>'s name." },
                { "name": "value", "type": "string", "optional": true, "description": "<code>Attr</code>'s value." },
                { "name": "pseudoType", "$ref": "PseudoType", "optional": true, "description": "Pseudo element type for this node." },
                { "name": "shadowRootType", "$ref": "ShadowRootType", "optional": true, "description": "Shadow root type." },
                { "name": "customElementState", "$ref": "CustomElementState", "optional": true, "description": "Custom element state." },
                { "name": "frameId", "$ref": "Network.FrameId", "optional": true, "description": "Frame ID for frame owner elements." },
                { "name": "contentDocument", "$ref": "Node", "optional": true, "description": "Content document for frame owner elements." },
                { "name": "shadowRoots", "type": "array", "optional": true, "items": { "$ref": "Node" }, "description": "Shadow root list for given element host." },
                { "name": "templateContent", "$ref": "Node", "optional": true, "description": "Content document fragment for template elements" },
                { "name": "pseudoElements", "type": "array", "items": { "$ref": "Node" }, "optional": true, "description": "Pseudo elements associated with this node." },
                { "name": "role", "type": "string", "optional": true, "description": "Computed value for first recognized role token, default role per element, or overridden role." },
                { "name": "contentSecurityPolicyHash", "type": "string", "optional": true, "description": "Computed SHA-256 Content Security Policy hash source for given element." }
            ],
            "description": "DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes. DOMNode is a base node mirror type."
        },
        {
            "id": "EventListener",
            "type": "object",
            "properties": [
                { "name": "type", "type": "string", "description": "<code>EventListener</code>'s type." },
                { "name": "useCapture", "type": "boolean", "description": "<code>EventListener</code>'s useCapture." },
                { "name": "isAttribute", "type": "boolean", "description": "<code>EventListener</code>'s isAttribute." },
                { "name": "nodeId", "$ref": "NodeId", "description": "Target <code>DOMNode</code> id." },
                { "name": "handlerBody", "type": "string", "description": "Event handler function body." },
                { "name": "location", "$ref": "Debugger.Location", "optional": true, "description": "Handler code location." },
                { "name": "sourceName", "type": "string", "optional": true, "description": "Source script URL." },
                { "name": "handler", "$ref": "Runtime.RemoteObject", "optional": true, "description": "Event handler function value." },
                { "name": "passive", "type": "boolean", "optional": true, "description": "<code>EventListener</code>'s passive." },
                { "name": "once", "type": "boolean", "optional": true, "description": "<code>EventListener</code>'s once." }
            ],
            "description": "A structure holding event listener properties."
        },
        {
            "id": "AccessibilityProperties",
            "description": "A structure holding accessibility properties.",
            "type": "object",
            "properties": [
                { "name": "activeDescendantNodeId", "$ref": "NodeId", "optional": true, "description": "<code>DOMNode</code> id of the accessibility object referenced by aria-activedescendant." },
                { "name": "busy", "type": "boolean", "optional": true, "description": "Value of @aria-busy on current or ancestor node." },
                { "name": "checked", "type": "string", "optional": true, "enum": ["true", "false", "mixed"], "description": "Checked state of certain form controls." },
                { "name": "childNodeIds", "type": "array", "items": { "$ref": "NodeId" }, "optional": true, "description": "Array of <code>DOMNode</code> ids of the accessibility tree children if available." },
                { "name": "controlledNodeIds", "type": "array", "items": { "$ref": "NodeId" }, "optional": true, "description": "Array of <code>DOMNode</code> ids of any nodes referenced via @aria-controls." },
                { "name": "current", "type": "string", "optional": true, "enum": ["true", "false", "page", "step", "location", "date", "time"], "description": "Current item within a container or set of related elements." },
                { "name": "disabled", "type": "boolean", "optional": true, "description": "Disabled state of form controls." },
                { "name": "headingLevel", "type": "number", "optional": true, "description": "Heading level of a heading element." },
                { "name": "hierarchyLevel", "type": "number", "optional": true, "description": "The hierarchical level of an element." },
                { "name": "isPopUpButton", "type": "boolean", "optional": true, "description": "Whether an element is a popup button." },
                { "name": "exists", "type": "boolean", "description": "Indicates whether there is an existing AX object for the DOM node. If this is false, all the other properties will be default values." },
                { "name": "expanded", "type": "boolean", "optional": true, "description": "Expanded state." },
                { "name": "flowedNodeIds", "type": "array", "items": { "$ref": "NodeId" }, "optional": true, "description": "Array of <code>DOMNode</code> ids of any nodes referenced via @aria-flowto." },
                { "name": "focused", "type": "boolean", "optional": true, "description": "Focused state. Only defined on focusable elements." },
                { "name": "ignored", "type": "boolean", "optional": true, "description": "Indicates whether the accessibility of the associated AX object node is ignored, whether heuristically or explicitly." },
                { "name": "ignoredByDefault", "type": "boolean", "optional": true, "description": "State indicating whether the accessibility of the associated AX object node is ignored by default for node type." },
                { "name": "invalid", "type": "string", "optional": true, "enum": ["true", "false", "grammar", "spelling"], "description": "Invalid status of form controls." },
                { "name": "hidden", "type": "boolean", "optional": true, "description": "Hidden state. True if node or an ancestor is hidden via CSS or explicit @aria-hidden, to clarify why the element is ignored." },
                { "name": "label", "type": "string", "description": "Computed label value for the node, sometimes calculated by referencing other nodes." },
                { "name": "liveRegionAtomic", "type": "boolean", "optional": true, "description": "Value of @aria-atomic." },
                { "name": "liveRegionRelevant", "type": "array", "items": { "type": "string" }, "optional": true, "description": "Token value(s) of element's @aria-relevant attribute. Array of string values matching $ref LiveRegionRelevant. FIXME: Enum values blocked by http://webkit.org/b/133711" },
                { "name": "liveRegionStatus", "type": "string", "optional": true, "enum": ["assertive", "polite", "off"], "description": "Value of element's @aria-live attribute." },
                { "name": "mouseEventNodeId", "$ref": "NodeId", "optional": true, "description": "<code>DOMNode</code> id of node or closest ancestor node that has a mousedown, mouseup, or click event handler." },
                { "name": "nodeId", "$ref": "NodeId", "description": "Target <code>DOMNode</code> id." },
                { "name": "ownedNodeIds", "type": "array", "items": { "$ref": "NodeId" }, "optional": true, "description": "Array of <code>DOMNode</code> ids of any nodes referenced via @aria-owns." },
                { "name": "parentNodeId", "$ref": "NodeId", "optional": true, "description": "<code>DOMNode</code> id of the accessibility tree parent object if available." },
                { "name": "pressed", "type": "boolean", "optional": true, "description": "Pressed state for toggle buttons." },
                { "name": "readonly", "type": "boolean", "optional": true, "description": "Readonly state of text controls." },
                { "name": "required", "type": "boolean", "optional": true, "description": "Required state of form controls." },
                { "name": "role", "type": "string", "description": "Computed value for first recognized role token, default role per element, or overridden role." },
                { "name": "selected", "type": "boolean", "optional": true, "description": "Selected state of certain form controls." },
                { "name": "selectedChildNodeIds", "type": "array", "items": { "$ref": "NodeId" }, "optional": true, "description": "Array of <code>DOMNode</code> ids of any children marked as selected." }
            ]
        },
        {
            "id": "RGBAColor",
            "type": "object",
            "properties": [
                { "name": "r", "type": "integer", "description": "The red component, in the [0-255] range." },
                { "name": "g", "type": "integer", "description": "The green component, in the [0-255] range." },
                { "name": "b", "type": "integer", "description": "The blue component, in the [0-255] range." },
                { "name": "a", "type": "number", "optional": true, "description": "The alpha component, in the [0-1] range (default: 1)." }
            ],
            "description": "A structure holding an RGBA color."
        },
        {
            "id": "Quad",
            "type": "array",
            "items": { "type": "number" },
            "minItems": 8,
            "maxItems": 8,
            "description": "An array of quad vertices, x immediately followed by y for each point, points clock-wise."
        },
        {
            "id": "HighlightConfig",
            "type": "object",
            "properties": [
                { "name": "showInfo", "type": "boolean", "optional": true, "description": "Whether the node info tooltip should be shown (default: false)." },
                { "name": "contentColor", "$ref": "RGBAColor", "optional": true, "description": "The content box highlight fill color (default: transparent)." },
                { "name": "paddingColor", "$ref": "RGBAColor", "optional": true, "description": "The padding highlight fill color (default: transparent)." },
                { "name": "borderColor", "$ref": "RGBAColor", "optional": true, "description": "The border highlight fill color (default: transparent)." },
                { "name": "marginColor", "$ref": "RGBAColor", "optional": true, "description": "The margin highlight fill color (default: transparent)." }
            ],
            "description": "Configuration data for the highlighting of page elements."
        }
    ],
    "commands": [
        {
            "name": "getDocument",
            "returns": [
                { "name": "root", "$ref": "Node", "description": "Resulting node." }
            ],
            "description": "Returns the root DOM node to the caller."
        },
        {
            "name": "requestChildNodes",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to get children for." },
                { "name": "depth", "type": "integer", "optional": true, "description": "The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0." }
            ],
            "description": "Requests that children of the node with given id are returned to the caller in form of <code>setChildNodes</code> events where not only immediate children are retrieved, but all children down to the specified depth."
        },
        {
            "name": "querySelector",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to query upon." },
                { "name": "selector", "type": "string", "description": "Selector string." }
            ],
            "returns": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Query selector result." }
            ],
            "description": "Executes <code>querySelector</code> on a given node."
        },
        {
            "name": "querySelectorAll",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to query upon." },
                { "name": "selector", "type": "string", "description": "Selector string." }
            ],
            "returns": [
                { "name": "nodeIds", "type": "array", "items": { "$ref": "NodeId" }, "description": "Query selector result." }
            ],
            "description": "Executes <code>querySelectorAll</code> on a given node."
        },
        {
            "name": "setNodeName",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to set name for." },
                { "name": "name", "type": "string", "description": "New node's name." }
            ],
            "returns": [
                { "name": "nodeId", "$ref": "NodeId", "description": "New node's id." }
            ],
            "description": "Sets node name for a node with given id."
        },
        {
            "name": "setNodeValue",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to set value for." },
                { "name": "value", "type": "string", "description": "New node's value." }
            ],
            "description": "Sets node value for a node with given id."
        },
        {
            "name": "removeNode",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to remove." }
            ],
            "description": "Removes node with given id."
        },
        {
            "name": "setAttributeValue",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the element to set attribute for." },
                { "name": "name", "type": "string", "description": "Attribute name." },
                { "name": "value", "type": "string", "description": "Attribute value." }
            ],
            "description": "Sets attribute for an element with given id."
        },
        {
            "name": "setAttributesAsText",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the element to set attributes for." },
                { "name": "text", "type": "string", "description": "Text with a number of attributes. Will parse this text using HTML parser." },
                { "name": "name", "type": "string", "optional": true, "description": "Attribute name to replace with new attributes derived from text in case text parsed successfully." }
            ],
            "description": "Sets attributes on element with given id. This method is useful when user edits some existing attribute value and types in several attribute name/value pairs."
        },
        {
            "name": "removeAttribute",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the element to remove attribute from." },
                { "name": "name", "type": "string", "description": "Name of the attribute to remove." }
            ],
            "description": "Removes attribute with given name from an element with given id."
        },
        {
            "name": "getEventListenersForNode",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to get listeners for." },
                { "name": "objectGroup", "type": "string", "optional": true, "description": "Symbolic group name for handler value. Handler value is not returned without this parameter specified." }
            ],
            "returns": [
                { "name": "listeners", "type": "array", "items": { "$ref": "EventListener"}, "description": "Array of relevant listeners." }
            ],
            "description": "Returns event listeners relevant to the node."
        },
        {
            "name": "getAccessibilityPropertiesForNode",
            "description": "Returns a dictionary of accessibility properties for the node.",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node for which to get accessibility properties." }
            ],
            "returns": [
                { "name": "properties", "$ref": "AccessibilityProperties", "description": "Dictionary of relevant accessibility properties." }
            ]
        },
        {
            "name": "getOuterHTML",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to get markup for." }
            ],
            "returns": [
                { "name": "outerHTML", "type": "string", "description": "Outer HTML markup." }
            ],
            "description": "Returns node's HTML markup."
        },
        {
            "name": "setOuterHTML",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to set markup for." },
                { "name": "outerHTML", "type": "string", "description": "Outer HTML markup to set." }
            ],
            "description": "Sets node HTML markup, returns new node id."
        },
        {
            "name": "performSearch",
            "parameters": [
                { "name": "query", "type": "string", "description": "Plain text or query selector or XPath search query." },
                { "name": "nodeIds", "type": "array", "items": { "$ref": "NodeId" }, "optional": true, "description": "Ids of nodes to use as starting points for the search." }
            ],
            "returns": [
                { "name": "searchId", "type": "string", "description": "Unique search session identifier." },
                { "name": "resultCount", "type": "integer", "description": "Number of search results." }
            ],
            "description": "Searches for a given string in the DOM tree. Use <code>getSearchResults</code> to access search results or <code>cancelSearch</code> to end this search session."
        },
        {
            "name": "getSearchResults",
            "parameters": [
                { "name": "searchId", "type": "string", "description": "Unique search session identifier." },
                { "name": "fromIndex", "type": "integer", "description": "Start index of the search result to be returned." },
                { "name": "toIndex", "type": "integer", "description": "End index of the search result to be returned." }
            ],
            "returns": [
                { "name": "nodeIds", "type": "array", "items": { "$ref": "NodeId" }, "description": "Ids of the search result nodes." }
            ],
            "description": "Returns search results from given <code>fromIndex</code> to given <code>toIndex</code> from the sarch with the given identifier."
        },
        {
            "name": "discardSearchResults",
            "parameters": [
                { "name": "searchId", "type": "string", "description": "Unique search session identifier." }
            ],
            "description": "Discards search results from the session with the given id. <code>getSearchResults</code> should no longer be called for that search."
        },
        {
            "name": "requestNode",
            "parameters": [
                { "name": "objectId", "$ref": "Runtime.RemoteObjectId", "description": "JavaScript object id to convert into node." }
            ],
            "returns": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Node id for given object." }
            ],
            "description": "Requests that the node is sent to the caller given the JavaScript node object reference. All nodes that form the path from the node to the root are also sent to the client as a series of <code>setChildNodes</code> notifications."
        },
        {
            "name": "setInspectModeEnabled",
            "parameters": [
                { "name": "enabled", "type": "boolean", "description": "True to enable inspection mode, false to disable it." },
                { "name": "highlightConfig", "$ref": "HighlightConfig", "optional": true, "description": "A descriptor for the highlight appearance of hovered-over nodes. May be omitted if <code>enabled == false</code>." }
            ],
            "description": "Enters the 'inspect' mode. In this mode, elements that user is hovering over are highlighted. Backend then generates 'inspect' command upon element selection."
        },
        {
            "name": "highlightRect",
            "parameters": [
                { "name": "x", "type": "integer", "description": "X coordinate" },
                { "name": "y", "type": "integer", "description": "Y coordinate" },
                { "name": "width", "type": "integer", "description": "Rectangle width" },
                { "name": "height", "type": "integer", "description": "Rectangle height" },
                { "name": "color", "$ref": "RGBAColor", "optional": true, "description": "The highlight fill color (default: transparent)." },
                { "name": "outlineColor", "$ref": "RGBAColor", "optional": true, "description": "The highlight outline color (default: transparent)." },
                { "name": "usePageCoordinates", "type": "boolean", "optional": true, "description": "Indicates whether the provided parameters are in page coordinates or in viewport coordinates (the default)." }
            ],
            "description": "Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport."
        },
        {
            "name": "highlightQuad",
            "parameters": [
                { "name": "quad", "$ref": "Quad", "description": "Quad to highlight" },
                { "name": "color", "$ref": "RGBAColor", "optional": true, "description": "The highlight fill color (default: transparent)." },
                { "name": "outlineColor", "$ref": "RGBAColor", "optional": true, "description": "The highlight outline color (default: transparent)." },
                { "name": "usePageCoordinates", "type": "boolean", "optional": true, "description": "Indicates whether the provided parameters are in page coordinates or in viewport coordinates (the default)." }
            ],
            "description": "Highlights given quad. Coordinates are absolute with respect to the main frame viewport."
        },
        {
            "name": "highlightSelector",
            "parameters": [
                { "name": "highlightConfig", "$ref": "HighlightConfig", "description": "A descriptor for the highlight appearance." },
                { "name": "selectorString", "type": "string", "description": "A CSS selector for finding matching nodes to highlight." },
                { "name": "frameId", "type": "string", "optional": true, "description": "Identifier of the frame which will be searched using the selector.  If not provided, the main frame will be used." }
            ],
            "description": "Highlights all DOM nodes that match a given selector. A string containing a CSS selector must be specified."
        },
        {
            "name": "highlightNode",
            "parameters": [
                { "name": "highlightConfig", "$ref": "HighlightConfig", "description": "A descriptor for the highlight appearance." },
                { "name": "nodeId", "$ref": "NodeId", "optional": true, "description": "Identifier of the node to highlight." },
                { "name": "objectId", "$ref": "Runtime.RemoteObjectId", "optional": true, "description": "JavaScript object id of the node to be highlighted." }
            ],
            "description": "Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or objectId must be specified."
        },
        {
            "name": "hideHighlight",
            "description": "Hides DOM node highlight."
        },
        {
            "name": "highlightFrame",
            "parameters": [
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Identifier of the frame to highlight." },
                { "name": "contentColor", "$ref": "RGBAColor", "optional": true, "description": "The content box highlight fill color (default: transparent)." },
                { "name": "contentOutlineColor", "$ref": "RGBAColor", "optional": true, "description": "The content box highlight outline color (default: transparent)." }
            ],
            "description": "Highlights owner element of the frame with given id."
        },
        {
            "name": "pushNodeByPathToFrontend",
            "parameters": [
                { "name": "path", "type": "string", "description": "Path to node in the proprietary format." }
            ],
            "returns": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node for given path." }
            ],
            "description": "Requests that the node is sent to the caller given its path. // FIXME, use XPath"
        },
        {
            "name": "pushNodeByBackendIdToFrontend",
            "parameters": [
                { "name": "backendNodeId", "$ref": "BackendNodeId", "description": "The backend node id of the node." }
            ],
            "returns": [
                { "name": "nodeId", "$ref": "NodeId", "description": "The pushed node's id." }
            ],
            "description": "Requests that the node is sent to the caller given its backend node id."
        },
        {
            "name": "releaseBackendNodeIds",
            "parameters": [
                { "name": "nodeGroup", "type": "string", "description": "The backend node ids group name." }
            ],
            "description": "Requests that group of <code>BackendNodeIds</code> is released."
        },
        {
            "name": "resolveNode",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to resolve." },
                { "name": "objectGroup", "type": "string", "optional": true, "description": "Symbolic group name that can be used to release multiple objects." }
            ],
            "returns": [
                { "name": "object", "$ref": "Runtime.RemoteObject", "description": "JavaScript object wrapper for given node." }
            ],
            "description": "Resolves JavaScript node object for given node id."
        },
        {
            "name": "getAttributes",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to retrieve attibutes for." }
            ],
            "returns": [
                { "name": "attributes", "type": "array", "items": { "type": "string" }, "description": "An interleaved array of node attribute names and values." }
            ],
            "description": "Returns attributes for the specified node."
        },
        {
            "name": "moveTo",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to drop." },
                { "name": "targetNodeId", "$ref": "NodeId", "description": "Id of the element to drop into." },
                { "name": "insertBeforeNodeId", "$ref": "NodeId", "optional": true, "description": "Drop node before given one." }
            ],
            "returns": [
                { "name": "nodeId", "$ref": "NodeId", "description": "New id of the moved node." }
            ],
            "description": "Moves node into the new container, places it before the given anchor."
        },
        {
            "name": "undo",
            "description": "Undoes the last performed action."
        },
        {
            "name": "redo",
            "description": "Re-does the last undone action."
        },
        {
            "name": "markUndoableState",
            "description": "Marks last undoable state."
        },
        {
            "name": "focus",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to focus." }
            ],
            "description": "Focuses the given element."
        }
    ],
    "events": [
        {
            "name": "documentUpdated",
            "description": "Fired when <code>Document</code> has been totally updated. Node ids are no longer valid."
        },
        {
            "name": "setChildNodes",
            "parameters": [
                { "name": "parentId", "$ref": "NodeId", "description": "Parent node id to populate with children." },
                { "name": "nodes", "type": "array", "items": { "$ref": "Node"}, "description": "Child nodes array." }
            ],
            "description": "Fired when backend wants to provide client with the missing DOM structure. This happens upon most of the calls requesting node ids."
        },
        {
            "name": "attributeModified",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node that has changed." },
                { "name": "name", "type": "string", "description": "Attribute name." },
                { "name": "value", "type": "string", "description": "Attribute value." }
            ],
            "description": "Fired when <code>Element</code>'s attribute is modified."
        },
        {
            "name": "attributeRemoved",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node that has changed." },
                { "name": "name", "type": "string", "description": "A ttribute name." }
            ],
            "description": "Fired when <code>Element</code>'s attribute is removed."
        },
        {
            "name": "inlineStyleInvalidated",
            "parameters": [
                { "name": "nodeIds", "type": "array", "items": { "$ref": "NodeId" }, "description": "Ids of the nodes for which the inline styles have been invalidated." }
            ],
            "description": "Fired when <code>Element</code>'s inline style is modified via a CSS property modification."
        },
        {
            "name": "characterDataModified",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node that has changed." },
                { "name": "characterData", "type": "string", "description": "New text value." }
            ],
            "description": "Mirrors <code>DOMCharacterDataModified</code> event."
        },
        {
            "name": "childNodeCountUpdated",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node that has changed." },
                { "name": "childNodeCount", "type": "integer", "description": "New node count." }
            ],
            "description": "Fired when <code>Container</code>'s child node count has changed."
        },
        {
            "name": "childNodeInserted",
            "parameters": [
                { "name": "parentNodeId", "$ref": "NodeId", "description": "Id of the node that has changed." },
                { "name": "previousNodeId", "$ref": "NodeId", "description": "If of the previous siblint." },
                { "name": "node", "$ref": "Node", "description": "Inserted node data." }
            ],
            "description": "Mirrors <code>DOMNodeInserted</code> event."
        },
        {
            "name": "childNodeRemoved",
            "parameters": [
                { "name": "parentNodeId", "$ref": "NodeId", "description": "Parent id." },
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node that has been removed." }
            ],
            "description": "Mirrors <code>DOMNodeRemoved</code> event."
        },
        {
            "name": "shadowRootPushed",
            "parameters": [
                { "name": "hostId", "$ref": "NodeId", "description": "Host element id." },
                { "name": "root", "$ref": "Node", "description": "Shadow root." }
            ],
            "description": "Called when shadow root is pushed into the element."
        },
        {
            "name": "shadowRootPopped",
            "parameters": [
                { "name": "hostId", "$ref": "NodeId", "description": "Host element id." },
                { "name": "rootId", "$ref": "NodeId", "description": "Shadow root id." }
            ],
            "description": "Called when shadow root is popped from the element."
        },
        {
            "name": "customElementStateChanged",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Element id." },
                { "name": "customElementState", "$ref": "CustomElementState", "description": "Custom element state." }
            ],
            "description": "Called when the custom element state is changed."
        },
        {
            "name": "pseudoElementAdded",
            "parameters": [
                { "name": "parentId", "$ref": "NodeId", "description": "Pseudo element's parent element id." },
                { "name": "pseudoElement", "$ref": "Node", "description": "The added pseudo element." }
            ],
            "description": "Called when a pseudo element is added to an element."
        },
        {
            "name": "pseudoElementRemoved",
            "parameters": [
                { "name": "parentId", "$ref": "NodeId", "description": "Pseudo element's parent element id." },
                { "name": "pseudoElementId", "$ref": "NodeId", "description": "The removed pseudo element id." }
            ],
            "description": "Called when a pseudo element is removed from an element."
        }
    ]
}
